{
  "SNAP": [
		{
			"query": "select * from pg_stat_statements",
			"filename": "pg_stat_statements_history.csv",
			"object": "pg_stat_statements",
			"target": "pg_stat_statements_history",
			"add_snap_id": 1
		},
		{
			"query": "select * from pg_stat_activity",
			"filename": "pg_stat_activity_history.csv",
			"object": "pg_stat_activity",
			"target": "pg_stat_activity_history",
			"add_snap_id": 1
		},
		{
			"query": "select * from pg_statio_all_indexes",
			"filename": "pg_statio_all_indexes_history.csv",
			"object": "pg_statio_all_indexes",
			"target": "pg_statio_all_indexes_history",
			"add_snap_id": 1
		},
		{
			"query": "select * from pg_statio_all_tables",
			"filename": "pg_statio_all_tables_history.csv",
			"object": "pg_statio_all_tables",
			"target": "pg_statio_all_tables_history",
			"add_snap_id": 1
		},
		{
			"query": "select * from pg_stat_database",
			"filename": "pg_stat_database_history.csv",
			"object": "pg_stat_database",
			"target": "pg_stat_database_history",
			"add_snap_id": 1
		},
		{
			"query": "select * from pg_stat_all_tables",
			"filename": "pg_stat_all_tables_history.csv",
			"object": "pg_stat_all_tables",
			"target": "pg_stat_all_tables_history",
			"add_snap_id": 1
		},
		{
			"query": "select * from pg_stat_all_indexes",
			"filename": "pg_stat_all_indexes_history.csv",
			"object": "pg_stat_all_indexes",
			"target": "pg_stat_all_indexes_history",
			"add_snap_id": 1
		},
		{
			"query": "select * from pg_stat_progress_vacuum",
			"filename": "pg_stat_progress_vacuum_history.csv",
			"object": "pg_stat_progress_vacuum",
			"target": "pg_stat_progress_vacuum_history",
			"add_snap_id": 1
		},
		{
			"query": "select * from pg_locks",
			"filename": "pg_locks_history.csv",
			"object": "pg_locks",
			"target": "pg_locks_history",
			"add_snap_id": 1
		},
		{
			"query": "select * from pg_stat_bgwriter",
			"filename": "pg_stat_bgwriter_history.csv",
			"object": "pg_stat_bgwriter",
			"target": "pg_stat_bgwriter_history",
			"add_snap_id": 1
		},
		{
			"query": "select * from pg_stat_user_functions",
			"filename": "pg_stat_user_functions_history.csv",
			"object": "pg_stat_user_functions",
			"target": "pg_stat_user_functions_history",
			"add_snap_id": 1
		},
		{
			"query": "select * from aurora_log_report(5)",
			"filename": "aurora_log_report_history.csv",
			"ddl_query": "select * from aurora_log_report(1) where 1=0",
			"target": "aurora_log_report_history",
			"add_snap_id": 1	
		},
		{
			"query": "select nspname,relname,pg_catalog.pg_get_userbyid(relowner) as RelOwner from pg_class a LEFT JOIN pg_namespace b ON a.relnamespace=b.oid WHERE  relkind IN ('r','s') and (nspname !~ '^pg_toast' and nspname like 'pg_temp%') and relname not in ('tmpwritestart','tmpwriteend','resulttab')",
			"filename": "pg_temp_table_history.csv",
			"ddl_query": "select nspname,relname,pg_catalog.pg_get_userbyid(relowner) as RelOwner from pg_class a LEFT JOIN pg_namespace b ON a.relnamespace=b.oid WHERE  relkind IN ('r','s') and (nspname !~ '^pg_toast' and nspname like 'pg_temp%') and relname not in ('tmpwritestart','tmpwriteend','resulttab') and 1=0",
			"target": "pg_temp_table_history",
			"add_snap_id": 1
		}
  ],
  "PACKAGE": [
		{
			"query": "select oid,* from pg_class",
			"filename": "pg_class.csv",
			"ddl_query": "select oid,* from pg_class where 1=0",
			"target": "pg_class_cust",
			"add_snap_id": 0
		},
		{
			"query": "select * from pg_index",
			"filename": "pg_index.csv",
			"object": "pg_index",
			"target": "pg_index_cust",
			"add_snap_id": 0
		},
		{
			"query": "select * from pg_indexes",
			"filename": "pg_indexes.csv",
			"object": "pg_indexes",
			"target": "pg_indexes_cust",
			"add_snap_id": 0
		},
		{
			"query": "select * from pg_settings",
			"filename": "pg_settings.csv",
			"object": "pg_settings",
			"target": "pg_settings_cust",
			"add_snap_id": 0
		},
		{
			"query": "select * from pg_database",
			"filename": "pg_database.csv",
			"object": "pg_database",
			"target": "pg_database_cust",
			"add_snap_id": 0
		},
		{
			"query": "select * from pg_roles",
			"filename": "pg_roles.csv",
			"object": "pg_roles",
			"target": "pg_roles_cust",
			"add_snap_id": 0
		},
		{
			"query": "select * from pg_attribute",
			"filename": "pg_attribute.csv",
			"object": "pg_attribute",
			"target": "pg_attribute_cust",
			"add_snap_id": 0
		},
		{
			"query": "select oid,* from pg_namespace",
			"filename": "pg_namespace.csv",
			"ddl_query": "select oid,* from pg_namespace where 1=0",
			"target": "pg_namespace_cust",
			"add_snap_id": 0
		},
		{
			"query": "select * from pg_constraint",
			"filename": "pg_constraint.csv",
			"object": "pg_constraint",
			"target": "pg_constraint_cust",
			"add_snap_id": 0
		},
		{
			"query": "SELECT d.datname AS Name,  pg_catalog.pg_get_userbyid(d.datdba) AS Owner, CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT') THEN pg_catalog.pg_size_pretty(pg_catalog.pg_database_size(d.datname)) ELSE 'No Access' END AS SIZE FROM pg_catalog.pg_database d ORDER BY CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT') THEN pg_catalog.pg_database_size(d.datname) ELSE NULL END DESC",
			"filename": "size_database.csv",
			"ddl_query": "SELECT d.datname AS Name,  pg_catalog.pg_get_userbyid(d.datdba) AS Owner, CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT') THEN pg_catalog.pg_size_pretty(pg_catalog.pg_database_size(d.datname)) ELSE 'No Access' END AS SIZE FROM pg_catalog.pg_database d where 1=0",
			"target": "size_database_cust",
			"add_snap_id": 0
		},
		{
			"query": "SELECT schema_name, pg_size_pretty(sum(table_size)::bigint), trunc((sum(table_size) / pg_database_size(current_database())) * 100,2) as percent FROM ( SELECT pg_catalog.pg_namespace.nspname as schema_name, pg_relation_size(pg_catalog.pg_class.oid) as table_size FROM   pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON relnamespace = pg_catalog.pg_namespace.oid ) t GROUP BY schema_name ORDER BY schema_name",
			"filename": "size_schema.csv",
			"ddl_query": "SELECT schema_name, pg_size_pretty(sum(table_size)::bigint), trunc((sum(table_size) / pg_database_size(current_database())) * 100,2) as percent FROM ( SELECT pg_catalog.pg_namespace.nspname as schema_name, pg_relation_size(pg_catalog.pg_class.oid) as table_size FROM   pg_catalog.pg_class JOIN pg_catalog.pg_namespace ON relnamespace = pg_catalog.pg_namespace.oid ) t where 1=0 GROUP BY schema_name",
			"target": "size_schema_cust",
			"add_snap_id": 0
		},
		{
			"query": "SELECT c.oid,nspname AS schema_name, relname AS table_name, to_char(c.reltuples,'99999999999999999999') AS row_estimate, pg_size_pretty(pg_total_relation_size(c.oid)) AS total_size, pg_size_pretty(pg_relation_size (c.oid)) AS table_size, pg_size_pretty(pg_indexes_size(c.oid)) AS index_size, pg_size_pretty(pg_total_relation_size(reltoastrelid)) AS toast_size FROM pg_class c LEFT JOIN pg_namespace n ON n.oid = c.relnamespace where nspname NOT IN ('pg_catalog', 'information_schema') and nspname !~ '^pg_toast' and c.relkind in ('r','m') order by pg_total_relation_size(c.oid) DESC",
			"filename": "size_table_and_index.csv",
			"ddl_query": "SELECT c.oid,nspname AS schema_name, relname AS table_name, to_char(c.reltuples,'99999999999999999999') AS row_estimate, pg_size_pretty(pg_total_relation_size(c.oid)) AS total_size, pg_size_pretty(pg_relation_size (c.oid)) AS table_size, pg_size_pretty(pg_indexes_size(c.oid)) AS index_size, pg_size_pretty(pg_total_relation_size(reltoastrelid)) AS toast_size FROM pg_class c LEFT JOIN pg_namespace n ON n.oid = c.relnamespace where nspname NOT IN ('pg_catalog', 'information_schema') and nspname !~ '^pg_toast' and c.relkind in ('r','m') and 1=0",
			"target": "size_table_and_index_cust",
			"add_snap_id": 0
		},
		{
			"query": "SELECT c.oid::regclass as table_name, greatest(age(c.relfrozenxid),age(t.relfrozenxid)) as age, pg_size_pretty(pg_table_size(c.oid)) as table_size FROM pg_class c LEFT JOIN pg_class t ON c.reltoastrelid = t.oid WHERE c.relkind = 'r' ORDER BY 2 DESC",
			"filename": "aging_tables_for_vacuum.csv",
			"ddl_query": "SELECT c.oid::regclass as table_name, greatest(age(c.relfrozenxid),age(t.relfrozenxid)) as age, pg_size_pretty(pg_table_size(c.oid)) as table_size FROM pg_class c LEFT JOIN pg_class t ON c.reltoastrelid = t.oid WHERE c.relkind = 'r' and 1=0",
			"target": "aging_tables_for_vacuum_cust",
			"add_snap_id": 0
		},
		{
			"query": "WITH fk_actions ( code, action ) AS ( VALUES ( 'a', 'error' ), ( 'r', 'restrict' ), ( 'c', 'cascade' ), ( 'n', 'set null' ), ( 'd', 'set default' ) ), fk_list AS ( SELECT pg_constraint.oid as fkoid, conrelid, confrelid as parentid, conname, relname, nspname, fk_actions_update.action as update_action, fk_actions_delete.action as delete_action, conkey as key_cols FROM pg_constraint JOIN pg_class ON conrelid = pg_class.oid JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid JOIN fk_actions AS fk_actions_update ON confupdtype = fk_actions_update.code JOIN fk_actions AS fk_actions_delete ON confdeltype = fk_actions_delete.code WHERE contype = 'f' ), fk_attributes AS ( SELECT fkoid, conrelid, attname, attnum FROM fk_list JOIN pg_attribute ON conrelid = attrelid AND attnum = ANY( key_cols ) ORDER BY fkoid, attnum ), fk_cols_list AS ( SELECT fkoid, array_agg(attname) as cols_list FROM fk_attributes GROUP BY fkoid ), index_list AS ( SELECT indexrelid as indexid, pg_class.relname as indexname, indrelid, indkey, indpred is not null as has_predicate, pg_get_indexdef(indexrelid) as indexdef FROM pg_index JOIN pg_class ON indexrelid = pg_class.oid WHERE indisvalid ), fk_index_match AS ( SELECT fk_list.*, indexid, indexname, indkey::int[] as indexatts, has_predicate, indexdef, array_length(key_cols, 1) as fk_colcount, array_length(indkey,1) as index_colcount, round(pg_relation_size(conrelid)/(1024^2)::numeric) as table_mb, cols_list FROM fk_list JOIN fk_cols_list USING (fkoid) LEFT OUTER JOIN index_list ON conrelid = indrelid AND (indkey::int2[])[0:(array_length(key_cols,1) -1)] @> key_cols ), fk_perfect_match AS ( SELECT fkoid FROM fk_index_match WHERE (index_colcount - 1) <= fk_colcount AND NOT has_predicate AND indexdef LIKE '%USING btree%' ), fk_index_check AS ( SELECT 'no index' as issue, *, 1 as issue_sort FROM fk_index_match WHERE indexid IS NULL UNION ALL SELECT 'questionable index' as issue, *, 2 FROM fk_index_match WHERE indexid IS NOT NULL AND fkoid NOT IN ( SELECT fkoid FROM fk_perfect_match) ), parent_table_stats AS ( SELECT fkoid, tabstats.relname as parent_name, (n_tup_ins + n_tup_upd + n_tup_del + n_tup_hot_upd) as parent_writes, round(pg_relation_size(parentid)/(1024^2)::numeric) as parent_mb FROM pg_stat_user_tables AS tabstats JOIN fk_list ON relid = parentid ), fk_table_stats AS ( SELECT fkoid, (n_tup_ins + n_tup_upd + n_tup_del + n_tup_hot_upd) as writes, seq_scan as table_scans FROM pg_stat_user_tables AS tabstats JOIN fk_list ON relid = conrelid ) SELECT nspname as schema_name, relname as table_name, conname as fk_name, issue, table_mb, writes, table_scans, parent_name, parent_mb, parent_writes, cols_list, indexdef FROM fk_index_check JOIN parent_table_stats USING (fkoid) JOIN fk_table_stats USING (fkoid) ORDER BY issue_sort, table_mb DESC, table_name, fk_name",
			"filename": "fks_with_no_index.csv",
			"ddl_query": "WITH fk_actions ( code, action ) AS ( VALUES ( 'a', 'error' ), ( 'r', 'restrict' ), ( 'c', 'cascade' ), ( 'n', 'set null' ), ( 'd', 'set default' ) ), fk_list AS ( SELECT pg_constraint.oid as fkoid, conrelid, confrelid as parentid, conname, relname, nspname, fk_actions_update.action as update_action, fk_actions_delete.action as delete_action, conkey as key_cols FROM pg_constraint JOIN pg_class ON conrelid = pg_class.oid JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid JOIN fk_actions AS fk_actions_update ON confupdtype = fk_actions_update.code JOIN fk_actions AS fk_actions_delete ON confdeltype = fk_actions_delete.code WHERE contype = 'f' ), fk_attributes AS ( SELECT fkoid, conrelid, attname, attnum FROM fk_list JOIN pg_attribute ON conrelid = attrelid AND attnum = ANY( key_cols ) ORDER BY fkoid, attnum ), fk_cols_list AS ( SELECT fkoid, array_agg(attname) as cols_list FROM fk_attributes GROUP BY fkoid ), index_list AS ( SELECT indexrelid as indexid, pg_class.relname as indexname, indrelid, indkey, indpred is not null as has_predicate, pg_get_indexdef(indexrelid) as indexdef FROM pg_index JOIN pg_class ON indexrelid = pg_class.oid WHERE indisvalid ), fk_index_match AS ( SELECT fk_list.*, indexid, indexname, indkey::int[] as indexatts, has_predicate, indexdef, array_length(key_cols, 1) as fk_colcount, array_length(indkey,1) as index_colcount, round(pg_relation_size(conrelid)/(1024^2)::numeric) as table_mb, cols_list FROM fk_list JOIN fk_cols_list USING (fkoid) LEFT OUTER JOIN index_list ON conrelid = indrelid AND (indkey::int2[])[0:(array_length(key_cols,1) -1)] @> key_cols ), fk_perfect_match AS ( SELECT fkoid FROM fk_index_match WHERE (index_colcount - 1) <= fk_colcount AND NOT has_predicate AND indexdef LIKE '%USING btree%' ), fk_index_check AS ( SELECT 'no index' as issue, *, 1 as issue_sort FROM fk_index_match WHERE indexid IS NULL UNION ALL SELECT 'questionable index' as issue, *, 2 FROM fk_index_match WHERE indexid IS NOT NULL AND fkoid NOT IN ( SELECT fkoid FROM fk_perfect_match) ), parent_table_stats AS ( SELECT fkoid, tabstats.relname as parent_name, (n_tup_ins + n_tup_upd + n_tup_del + n_tup_hot_upd) as parent_writes, round(pg_relation_size(parentid)/(1024^2)::numeric) as parent_mb FROM pg_stat_user_tables AS tabstats JOIN fk_list ON relid = parentid ), fk_table_stats AS ( SELECT fkoid, (n_tup_ins + n_tup_upd + n_tup_del + n_tup_hot_upd) as writes, seq_scan as table_scans FROM pg_stat_user_tables AS tabstats JOIN fk_list ON relid = conrelid ) SELECT nspname as schema_name, relname as table_name, conname as fk_name, issue, table_mb, writes, table_scans, parent_name, parent_mb, parent_writes, cols_list, indexdef FROM fk_index_check JOIN parent_table_stats USING (fkoid) JOIN fk_table_stats USING (fkoid) where 1=0",
			"target": "fks_with_no_index",
			"add_snap_id": 0
		},
		{
			"query": "WITH index_usage AS ( SELECT sut.relid, current_database() AS database, sut.schemaname::text as schema_name, sut.relname::text AS table_name, sut.seq_scan as table_scans, sut.idx_scan as index_scans, pg_total_relation_size(relid) as table_bytes, round((sut.n_tup_ins + sut.n_tup_del + sut.n_tup_upd + sut.n_tup_hot_upd) / (seq_tup_read::NUMERIC + 2), 2) as writes_per_scan FROM pg_stat_user_tables sut ), index_counts AS ( SELECT sut.relid, count(*) as index_count FROM pg_stat_user_tables sut LEFT OUTER JOIN pg_indexes ON sut.schemaname = pg_indexes.schemaname AND sut.relname = pg_indexes.tablename GROUP BY relid ), too_many_tablescans AS ( SELECT 'many table scans'::TEXT as reason, database, schema_name, table_name, table_scans, pg_size_pretty(table_bytes) as table_size, writes_per_scan, index_count, table_bytes FROM index_usage JOIN index_counts USING ( relid ) WHERE table_scans > 1000 AND table_scans > ( index_scans * 2 ) AND table_bytes > 32000000 AND writes_per_scan < ( 1.0 ) ORDER BY table_scans DESC ), scans_no_index AS ( SELECT 'scans, few indexes'::TEXT as reason, database, schema_name, table_name, table_scans, pg_size_pretty(table_bytes) as table_size, writes_per_scan, index_count, table_bytes FROM index_usage JOIN index_counts USING ( relid ) WHERE table_scans > 100 AND table_scans > ( index_scans ) AND index_count < 2 AND table_bytes > 32000000 AND writes_per_scan < ( 1.0 ) ORDER BY table_scans DESC ), big_tables_with_scans AS ( SELECT 'big table scans'::TEXT as reason, database, schema_name, table_name, table_scans, pg_size_pretty(table_bytes) as table_size, writes_per_scan, index_count, table_bytes FROM index_usage JOIN index_counts USING ( relid ) WHERE table_scans > 100 AND table_scans > ( index_scans / 10 ) AND table_bytes > 1000000000 AND writes_per_scan < ( 1.0 ) ORDER BY table_bytes DESC ), scans_no_writes AS ( SELECT 'scans, no writes'::TEXT as reason, database, schema_name, table_name, table_scans, pg_size_pretty(table_bytes) as table_size, writes_per_scan, index_count, table_bytes FROM index_usage JOIN index_counts USING ( relid ) WHERE table_scans > 100 AND table_scans > ( index_scans / 4 ) AND table_bytes > 32000000 AND writes_per_scan < ( 0.1 ) ORDER BY writes_per_scan ASC ) SELECT * from (SELECT reason, database, schema_name, table_name, table_scans, table_size, writes_per_scan, index_count FROM too_many_tablescans UNION ALL SELECT reason, database, schema_name, table_name, table_scans, table_size, writes_per_scan, index_count FROM scans_no_index UNION ALL SELECT reason, database, schema_name, table_name, table_scans, table_size, writes_per_scan, index_count FROM big_tables_with_scans UNION ALL SELECT reason, database, schema_name, table_name, table_scans, table_size, writes_per_scan, index_count FROM scans_no_writes) as needed_indexes",
			"filename": "needed_indexes.csv",
			"ddl_query": "WITH index_usage AS ( SELECT sut.relid, current_database() AS database, sut.schemaname::text as schema_name, sut.relname::text AS table_name, sut.seq_scan as table_scans, sut.idx_scan as index_scans, pg_total_relation_size(relid) as table_bytes, round((sut.n_tup_ins + sut.n_tup_del + sut.n_tup_upd + sut.n_tup_hot_upd) / (seq_tup_read::NUMERIC + 2), 2) as writes_per_scan FROM pg_stat_user_tables sut ), index_counts AS ( SELECT sut.relid, count(*) as index_count FROM pg_stat_user_tables sut LEFT OUTER JOIN pg_indexes ON sut.schemaname = pg_indexes.schemaname AND sut.relname = pg_indexes.tablename GROUP BY relid ), too_many_tablescans AS ( SELECT 'many table scans'::TEXT as reason, database, schema_name, table_name, table_scans, pg_size_pretty(table_bytes) as table_size, writes_per_scan, index_count, table_bytes FROM index_usage JOIN index_counts USING ( relid ) WHERE table_scans > 1000 AND table_scans > ( index_scans * 2 ) AND table_bytes > 32000000 AND writes_per_scan < ( 1.0 ) ORDER BY table_scans DESC ), scans_no_index AS ( SELECT 'scans, few indexes'::TEXT as reason, database, schema_name, table_name, table_scans, pg_size_pretty(table_bytes) as table_size, writes_per_scan, index_count, table_bytes FROM index_usage JOIN index_counts USING ( relid ) WHERE table_scans > 100 AND table_scans > ( index_scans ) AND index_count < 2 AND table_bytes > 32000000 AND writes_per_scan < ( 1.0 ) ORDER BY table_scans DESC ), big_tables_with_scans AS ( SELECT 'big table scans'::TEXT as reason, database, schema_name, table_name, table_scans, pg_size_pretty(table_bytes) as table_size, writes_per_scan, index_count, table_bytes FROM index_usage JOIN index_counts USING ( relid ) WHERE table_scans > 100 AND table_scans > ( index_scans / 10 ) AND table_bytes > 1000000000 AND writes_per_scan < ( 1.0 ) ORDER BY table_bytes DESC ), scans_no_writes AS ( SELECT 'scans, no writes'::TEXT as reason, database, schema_name, table_name, table_scans, pg_size_pretty(table_bytes) as table_size, writes_per_scan, index_count, table_bytes FROM index_usage JOIN index_counts USING ( relid ) WHERE table_scans > 100 AND table_scans > ( index_scans / 4 ) AND table_bytes > 32000000 AND writes_per_scan < ( 0.1 ) ORDER BY writes_per_scan ASC ) SELECT * from (SELECT reason, database, schema_name, table_name, table_scans, table_size, writes_per_scan, index_count FROM too_many_tablescans UNION ALL SELECT reason, database, schema_name, table_name, table_scans, table_size, writes_per_scan, index_count FROM scans_no_index UNION ALL SELECT reason, database, schema_name, table_name, table_scans, table_size, writes_per_scan, index_count FROM big_tables_with_scans UNION ALL SELECT reason, database, schema_name, table_name, table_scans, table_size, writes_per_scan, index_count FROM scans_no_writes) as needed_indexes where 1=0",
			"target": "needed_indexes",
			"add_snap_id": 0
		},
		{
			"query": "SELECT current_database(), schemaname, tblname, pg_size_pretty(bs*tblpages) AS real_size, pg_size_pretty(((tblpages-est_tblpages)*bs)::bigint) AS extra_size, CASE WHEN tblpages - est_tblpages > 0 THEN round(100 * ((tblpages - est_tblpages)/tblpages)::numeric,2) ELSE 0 END AS extra_ratio, fillfactor, CASE WHEN tblpages - est_tblpages_ff > 0 THEN pg_size_pretty(((tblpages-est_tblpages_ff)*bs)::bigint) ELSE 0::text END AS bloat_size, CASE WHEN tblpages - est_tblpages_ff > 0 THEN round((100 * (tblpages - est_tblpages_ff)/tblpages)::numeric,2) ELSE 0 END AS bloat_ratio, is_na FROM ( SELECT ceil( reltuples / ( (bs-page_hdr)/tpl_size ) ) + ceil( toasttuples / 4 ) AS est_tblpages, ceil( reltuples / ( (bs-page_hdr)*fillfactor/(tpl_size*100) ) ) + ceil( toasttuples / 4 ) AS est_tblpages_ff, tblpages, fillfactor, bs, tblid, schemaname, tblname, heappages, toastpages, is_na FROM ( SELECT ( 4 + tpl_hdr_size + tpl_data_size + (2*ma) - CASE WHEN tpl_hdr_size%ma = 0 THEN ma ELSE tpl_hdr_size%ma END - CASE WHEN ceil(tpl_data_size)::int%ma = 0 THEN ma ELSE ceil(tpl_data_size)::int%ma END ) AS tpl_size, bs - page_hdr AS size_per_block, (heappages + toastpages) AS tblpages, heappages, toastpages, reltuples, toasttuples, bs, page_hdr, tblid, schemaname, tblname, fillfactor, is_na FROM ( SELECT tbl.oid AS tblid, ns.nspname AS schemaname, tbl.relname AS tblname, tbl.reltuples, tbl.relpages AS heappages, coalesce(toast.relpages, 0) AS toastpages, coalesce(toast.reltuples, 0) AS toasttuples, coalesce(substring( array_to_string(tbl.reloptions, ' ') FROM 'fillfactor=([0-9]+)')::smallint, 100) AS fillfactor, current_setting('block_size')::numeric AS bs, CASE WHEN version()~'mingw32' OR version()~'64-bit|x86_64|ppc64|ia64|amd64' THEN 8 ELSE 4 END AS ma, 24 AS page_hdr, 23 + CASE WHEN MAX(coalesce(s.null_frac,0)) > 0 THEN ( 7 + count(s.attname) ) / 8 ELSE 0::int END + CASE WHEN bool_or(att.attname = 'oid' and att.attnum < 0) THEN 4 ELSE 0 END AS tpl_hdr_size, sum( (1-coalesce(s.null_frac, 0)) * coalesce(s.avg_width, 0) ) AS tpl_data_size, bool_or(att.atttypid = 'pg_catalog.name'::regtype) OR sum(CASE WHEN att.attnum > 0 THEN 1 ELSE 0 END) <> count(s.attname) AS is_na FROM pg_attribute AS att JOIN pg_class AS tbl ON att.attrelid = tbl.oid JOIN pg_namespace AS ns ON ns.oid = tbl.relnamespace LEFT JOIN pg_stats AS s ON s.schemaname=ns.nspname AND s.tablename = tbl.relname AND s.inherited=false AND s.attname=att.attname LEFT JOIN pg_class AS toast ON tbl.reltoastrelid = toast.oid WHERE NOT att.attisdropped AND tbl.relkind in ('r','m') GROUP BY 1,2,3,4,5,6,7,8,9,10 ORDER BY 2,3 ) AS s ) AS s2 ) AS s3 ORDER BY schemaname, tblname",
			"filename": "table_bloats.csv",
			"ddl_query": "SELECT current_database(), schemaname, tblname, pg_size_pretty(bs*tblpages) AS real_size, pg_size_pretty(((tblpages-est_tblpages)*bs)::bigint) AS extra_size, CASE WHEN tblpages - est_tblpages > 0 THEN round(100 * ((tblpages - est_tblpages)/tblpages)::numeric,2) ELSE 0 END AS extra_ratio, fillfactor, CASE WHEN tblpages - est_tblpages_ff > 0 THEN pg_size_pretty(((tblpages-est_tblpages_ff)*bs)::bigint) ELSE 0::text END AS bloat_size, CASE WHEN tblpages - est_tblpages_ff > 0 THEN round((100 * (tblpages - est_tblpages_ff)/tblpages)::numeric,2) ELSE 0 END AS bloat_ratio, is_na FROM ( SELECT ceil( reltuples / ( (bs-page_hdr)/tpl_size ) ) + ceil( toasttuples / 4 ) AS est_tblpages, ceil( reltuples / ( (bs-page_hdr)*fillfactor/(tpl_size*100) ) ) + ceil( toasttuples / 4 ) AS est_tblpages_ff, tblpages, fillfactor, bs, tblid, schemaname, tblname, heappages, toastpages, is_na FROM ( SELECT ( 4 + tpl_hdr_size + tpl_data_size + (2*ma) - CASE WHEN tpl_hdr_size%ma = 0 THEN ma ELSE tpl_hdr_size%ma END - CASE WHEN ceil(tpl_data_size)::int%ma = 0 THEN ma ELSE ceil(tpl_data_size)::int%ma END ) AS tpl_size, bs - page_hdr AS size_per_block, (heappages + toastpages) AS tblpages, heappages, toastpages, reltuples, toasttuples, bs, page_hdr, tblid, schemaname, tblname, fillfactor, is_na FROM ( SELECT tbl.oid AS tblid, ns.nspname AS schemaname, tbl.relname AS tblname, tbl.reltuples, tbl.relpages AS heappages, coalesce(toast.relpages, 0) AS toastpages, coalesce(toast.reltuples, 0) AS toasttuples, coalesce(substring( array_to_string(tbl.reloptions, ' ') FROM 'fillfactor=([0-9]+)')::smallint, 100) AS fillfactor, current_setting('block_size')::numeric AS bs, CASE WHEN version()~'mingw32' OR version()~'64-bit|x86_64|ppc64|ia64|amd64' THEN 8 ELSE 4 END AS ma, 24 AS page_hdr, 23 + CASE WHEN MAX(coalesce(s.null_frac,0)) > 0 THEN ( 7 + count(s.attname) ) / 8 ELSE 0::int END + CASE WHEN bool_or(att.attname = 'oid' and att.attnum < 0) THEN 4 ELSE 0 END AS tpl_hdr_size, sum( (1-coalesce(s.null_frac, 0)) * coalesce(s.avg_width, 0) ) AS tpl_data_size, bool_or(att.atttypid = 'pg_catalog.name'::regtype) OR sum(CASE WHEN att.attnum > 0 THEN 1 ELSE 0 END) <> count(s.attname) AS is_na FROM pg_attribute AS att JOIN pg_class AS tbl ON att.attrelid = tbl.oid JOIN pg_namespace AS ns ON ns.oid = tbl.relnamespace LEFT JOIN pg_stats AS s ON s.schemaname=ns.nspname AND s.tablename = tbl.relname AND s.inherited=false AND s.attname=att.attname LEFT JOIN pg_class AS toast ON tbl.reltoastrelid = toast.oid WHERE NOT att.attisdropped AND tbl.relkind in ('r','m') GROUP BY 1,2,3,4,5,6,7,8,9,10 ORDER BY 2,3 ) AS s ) AS s2 ) AS s3 where 1=0",
			"target": "table_bloats",
			"add_snap_id": 0
		},
		{
			"query": "SELECT current_database(), nspname AS schemaname, tblname, idxname, pg_size_pretty(bs*(relpages)::bigint) AS real_size, pg_size_pretty(bs*(relpages-est_pages)::bigint) AS extra_size, round((100 * (relpages-est_pages)::float / relpages)::numeric,2) AS extra_ratio, fillfactor, CASE WHEN relpages > est_pages_ff THEN pg_size_pretty((bs*(relpages-est_pages_ff))::bigint) ELSE 0::text END AS bloat_size, round((100 * (relpages-est_pages_ff)::float / relpages)::numeric,2) AS bloat_ratio, is_na FROM ( SELECT coalesce(1 + ceil(reltuples/floor((bs-pageopqdata-pagehdr)/(4+nulldatahdrwidth)::float)), 0 ) AS est_pages, coalesce(1 + ceil(reltuples/floor((bs-pageopqdata-pagehdr)*fillfactor/(100*(4+nulldatahdrwidth)::float))), 0 ) AS est_pages_ff, bs, nspname, tblname, idxname, relpages, fillfactor, is_na FROM ( SELECT maxalign, bs, nspname, tblname, idxname, reltuples, relpages, idxoid, fillfactor, ( index_tuple_hdr_bm + maxalign - CASE WHEN index_tuple_hdr_bm%maxalign = 0 THEN maxalign ELSE index_tuple_hdr_bm%maxalign END + nulldatawidth + maxalign - CASE WHEN nulldatawidth = 0 THEN 0 WHEN nulldatawidth::integer%maxalign = 0 THEN maxalign ELSE nulldatawidth::integer%maxalign END )::numeric AS nulldatahdrwidth, pagehdr, pageopqdata, is_na FROM ( SELECT n.nspname, i.tblname, i.idxname, i.reltuples, i.relpages, i.idxoid, i.fillfactor, current_setting('block_size')::numeric AS bs, CASE WHEN version() ~ 'mingw32' OR version() ~ '64-bit|x86_64|ppc64|ia64|amd64' THEN 8 ELSE 4 END AS maxalign, 24 AS pagehdr, 16 AS pageopqdata, CASE WHEN max(coalesce(s.null_frac,0)) = 0 THEN 2 ELSE 2 + (( 32 + 8 - 1 ) / 8) END AS index_tuple_hdr_bm, sum( (1-coalesce(s.null_frac, 0)) * coalesce(s.avg_width, 1024)) AS nulldatawidth, max( CASE WHEN i.atttypid = 'pg_catalog.name'::regtype THEN 1 ELSE 0 END ) > 0 AS is_na FROM ( SELECT ct.relname AS tblname, ct.relnamespace, ic.idxname, ic.attpos, ic.indkey, ic.indkey[ic.attpos], ic.reltuples, ic.relpages, ic.tbloid, ic.idxoid, ic.fillfactor, coalesce(a1.attnum, a2.attnum) AS attnum, coalesce(a1.attname, a2.attname) AS attname, coalesce(a1.atttypid, a2.atttypid) AS atttypid, CASE WHEN a1.attnum IS NULL THEN ic.idxname ELSE ct.relname END AS attrelname FROM ( SELECT idxname, reltuples, relpages, tbloid, idxoid, fillfactor, indkey, pg_catalog.generate_series(1,indnatts) AS attpos FROM ( SELECT ci.relname AS idxname, ci.reltuples, ci.relpages, i.indrelid AS tbloid, i.indexrelid AS idxoid, coalesce(substring( array_to_string(ci.reloptions, ' ') from 'fillfactor=([0-9]+)')::smallint, 90) AS fillfactor, i.indnatts, pg_catalog.string_to_array(pg_catalog.textin( pg_catalog.int2vectorout(i.indkey)),' ')::int[] AS indkey FROM pg_catalog.pg_index i JOIN pg_catalog.pg_class ci ON ci.oid = i.indexrelid WHERE ci.relam=(SELECT oid FROM pg_am WHERE amname = 'btree') AND ci.relpages > 0 ) AS idx_data ) AS ic JOIN pg_catalog.pg_class ct ON ct.oid = ic.tbloid LEFT JOIN pg_catalog.pg_attribute a1 ON ic.indkey[ic.attpos] <> 0 AND a1.attrelid = ic.tbloid AND a1.attnum = ic.indkey[ic.attpos] LEFT JOIN pg_catalog.pg_attribute a2 ON ic.indkey[ic.attpos] = 0 AND a2.attrelid = ic.idxoid AND a2.attnum = ic.attpos ) i JOIN pg_catalog.pg_namespace n ON n.oid = i.relnamespace JOIN pg_catalog.pg_stats s ON s.schemaname = n.nspname AND s.tablename = i.attrelname AND s.attname = i.attname GROUP BY 1,2,3,4,5,6,7,8,9,10,11 ) AS rows_data_stats ) AS rows_hdr_pdg_stats ) AS relation_stats ORDER BY nspname, tblname, idxname",
			"filename": "index_bloats.csv",
			"ddl_query": "SELECT current_database(), nspname AS schemaname, tblname, idxname, pg_size_pretty(bs*(relpages)::bigint) AS real_size, pg_size_pretty(bs*(relpages-est_pages)::bigint) AS extra_size, round((100 * (relpages-est_pages)::float / relpages)::numeric,2) AS extra_ratio, fillfactor, CASE WHEN relpages > est_pages_ff THEN pg_size_pretty((bs*(relpages-est_pages_ff))::bigint) ELSE 0::text END AS bloat_size, round((100 * (relpages-est_pages_ff)::float / relpages)::numeric,2) AS bloat_ratio, is_na FROM ( SELECT coalesce(1 + ceil(reltuples/floor((bs-pageopqdata-pagehdr)/(4+nulldatahdrwidth)::float)), 0 ) AS est_pages, coalesce(1 + ceil(reltuples/floor((bs-pageopqdata-pagehdr)*fillfactor/(100*(4+nulldatahdrwidth)::float))), 0 ) AS est_pages_ff, bs, nspname, tblname, idxname, relpages, fillfactor, is_na FROM ( SELECT maxalign, bs, nspname, tblname, idxname, reltuples, relpages, idxoid, fillfactor, ( index_tuple_hdr_bm + maxalign - CASE WHEN index_tuple_hdr_bm%maxalign = 0 THEN maxalign ELSE index_tuple_hdr_bm%maxalign END + nulldatawidth + maxalign - CASE WHEN nulldatawidth = 0 THEN 0 WHEN nulldatawidth::integer%maxalign = 0 THEN maxalign ELSE nulldatawidth::integer%maxalign END )::numeric AS nulldatahdrwidth, pagehdr, pageopqdata, is_na FROM ( SELECT n.nspname, i.tblname, i.idxname, i.reltuples, i.relpages, i.idxoid, i.fillfactor, current_setting('block_size')::numeric AS bs, CASE WHEN version() ~ 'mingw32' OR version() ~ '64-bit|x86_64|ppc64|ia64|amd64' THEN 8 ELSE 4 END AS maxalign, 24 AS pagehdr, 16 AS pageopqdata, CASE WHEN max(coalesce(s.null_frac,0)) = 0 THEN 2 ELSE 2 + (( 32 + 8 - 1 ) / 8) END AS index_tuple_hdr_bm, sum( (1-coalesce(s.null_frac, 0)) * coalesce(s.avg_width, 1024)) AS nulldatawidth, max( CASE WHEN i.atttypid = 'pg_catalog.name'::regtype THEN 1 ELSE 0 END ) > 0 AS is_na FROM ( SELECT ct.relname AS tblname, ct.relnamespace, ic.idxname, ic.attpos, ic.indkey, ic.indkey[ic.attpos], ic.reltuples, ic.relpages, ic.tbloid, ic.idxoid, ic.fillfactor, coalesce(a1.attnum, a2.attnum) AS attnum, coalesce(a1.attname, a2.attname) AS attname, coalesce(a1.atttypid, a2.atttypid) AS atttypid, CASE WHEN a1.attnum IS NULL THEN ic.idxname ELSE ct.relname END AS attrelname FROM ( SELECT idxname, reltuples, relpages, tbloid, idxoid, fillfactor, indkey, pg_catalog.generate_series(1,indnatts) AS attpos FROM ( SELECT ci.relname AS idxname, ci.reltuples, ci.relpages, i.indrelid AS tbloid, i.indexrelid AS idxoid, coalesce(substring( array_to_string(ci.reloptions, ' ') from 'fillfactor=([0-9]+)')::smallint, 90) AS fillfactor, i.indnatts, pg_catalog.string_to_array(pg_catalog.textin( pg_catalog.int2vectorout(i.indkey)),' ')::int[] AS indkey FROM pg_catalog.pg_index i JOIN pg_catalog.pg_class ci ON ci.oid = i.indexrelid WHERE ci.relam=(SELECT oid FROM pg_am WHERE amname = 'btree') AND ci.relpages > 0 ) AS idx_data ) AS ic JOIN pg_catalog.pg_class ct ON ct.oid = ic.tbloid LEFT JOIN pg_catalog.pg_attribute a1 ON ic.indkey[ic.attpos] <> 0 AND a1.attrelid = ic.tbloid AND a1.attnum = ic.indkey[ic.attpos] LEFT JOIN pg_catalog.pg_attribute a2 ON ic.indkey[ic.attpos] = 0 AND a2.attrelid = ic.idxoid AND a2.attnum = ic.attpos ) i JOIN pg_catalog.pg_namespace n ON n.oid = i.relnamespace JOIN pg_catalog.pg_stats s ON s.schemaname = n.nspname AND s.tablename = i.attrelname AND s.attname = i.attname GROUP BY 1,2,3,4,5,6,7,8,9,10,11 ) AS rows_data_stats ) AS rows_hdr_pdg_stats ) AS relation_stats where 1=0",
			"target": "index_bloats",
			"add_snap_id": 0
		}
	],
	"DATA_TYPE_REPLACE": [
		{
			"source": "regclass",
			"target": "text"
		},
		{
			"source": "pg_node_tree",
			"target": "text"
		},
		{
			"source": "aclitem",
			"target": "text"
		},
		{
			"source": "anyarray",
			"target": "text"
		},
		{
			"source": " C ",
			"target": ""
		}
	]
}